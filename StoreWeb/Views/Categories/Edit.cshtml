@model StoreWeb.Category

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="form-horizontal">
    @using (Html.BeginForm()) { }
    @*<div id="divCompanyInfo" class="divSection">*@
     <h4>Update Category Information</h4>
        <form autocomplete="off">
            @Html.HiddenFor(model => model.Id)
            @*<div class="row">
                <div class="col-xs-6">
                    <div class="form-group">
                        <label for="txtId">Id</label>
                        <input type="text" disabled class="form-control" value="@Model.Id" id="txtId">
                    </div>
                </div>
            </div>*@

            <div class="row">
                <div class="col-xs-6">
                    <div class="form-group">
                        <label for="txtCategoryName">Category Name</label>
                        <input type="text" data-required="true" class="form-control" value="@Model.CategoryName" id="txtCategoryName">
                    </div>
                </div>
            </div>
        </form>
    </div>
<div class="form-group">
    <input type="button" value="Update Category" class="btn btn-primary" id="btnCreateCategory">
</div>

@*<hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.LabelFor(model => model.CategoryName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CategoryName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CategoryName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }*@

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
<script type="text/javascript">
    

    $(function () {

        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }

        $("input[data-required]").blur(function () {
            var v = $(this).val();
            if (v === "") {
                $(this).addClass('invalid');
            } else {
                $(this).removeClass('invalid');
            }
        });
    });

    function validateForm() {

        return true;
        if ($('#txtCategoryName').val() === "") {
            toastr.error('Category name is required.', 'Validation Error')
            return false;
        }
    return true;
    };

    $('#btnCreateCategory').click(function () {

        if (validateForm()) {
            ////STEP 2:  Created js Object to get category form data using jQuery selectors
            var categoryObj = {
                Id: $('#Id').val(),
                CategoryName: $('#txtCategoryName').val(),
               
            };
            var data = { 'category': categoryObj };
    
            $.ajax({
                type: 'post',
                url: "@Url.Action("edit", "Categories")",
                data: data,
                success: function (result) {
                if (result.Success) {
                    var url = "/Categories/Index";
                    window.location.href = url;
                } else {
                    toastr.error(result.Message, 'Error')
                    return false;
                }
            },
            error: function (error) {
                toastr.error("Oops! something went wrong on server side", 'Error')
                return false;
            }
        });
    }
    });
</script>
}